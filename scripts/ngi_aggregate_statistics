#!/usr/bin/env python

""" 
This is a script to create NGI aggregate report.
"""

from __future__ import print_function

import argparse
import os
import collections
import csv

from ngi_reports.log import loggers
from ngi_reports.common import config as report_config
from ngi_reports.common import utils
from ngi_reports.common import basic_report

LOG = loggers.minimal_logger('NGI Aggregate Reports')
config = report_config.load_config()


def create_aggregate_statics (output_file="aggregate_report.csv", working_dir=os.getcwd(), **kwargs):

    def create_header (samples):
        all_keys = samples.values()[0].keys()
        return all_keys

    def create_rows (samples):
        for sample in samples.keys():
            yield samples[sample].values()

    # Make the report object
    report = basic_report.Report(config, LOG, working_dir, **kwargs)

    # Flatten out the dict to make it writable as a csv
    flattened_samples = { sample : collections.OrderedDict(utils.flatten_dict(report.samples[sample])) \
                            for sample in report.samples } 
  
    # Parse out the data
    header = create_header(flattened_samples)
    rows = create_rows(flattened_samples)

    LOG.info("Writing aggregate report to: " + output_file)

    # Drop it to a csv
    with open(output_file, 'wb') as csvfile:
        writer = csv.writer(csvfile, delimiter="\t")
        writer.writerow(header)
        for row in rows:
            writer.writerow(row)



# calling main method to generate report
if __name__ == "__main__":
    parser = argparse.ArgumentParser("Make an NGI summary statistics report.")
    parser.add_argument("-d", "--dir", dest="working_dir", default=os.getcwd(),
        help="Working Directory. Default: cwd when script is executed.")
    parser.add_argument("-o", "--output_file", dest="output_file", default="aggregate_report.csv",
        help="The output file to write the report to. Default: aggregate_report.csv")
    parser.add_argument("-n", "--node", dest="ngi_node", default="unknown",
        help="The ngi node the project was run at. Default: unknown")

    kwargs = vars(parser.parse_args())

    create_aggregate_statics(**kwargs)
