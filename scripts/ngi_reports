#!/usr/bin/env python

""" This is the entry point for ngi_reports.
"""

from __future__ import print_function

import argparse
import os
import shlex

from ngi_reports.log import loggers
from ngi_reports.common import config as report_config

LOG = loggers.minimal_logger('NGI Reports')
config = report_config.load_config()

def make_report (report_type, working_dir=os.getcwd()):
    
    # Setup
    template_fn = '{}.md'.format(report_type)
    LOG.info('Creating report type: {}'.format(report_type))
    
    # Import the module for this report type
    ngi_node = config.get('ngi_reports', 'ngi_node')
    report_mod = __import__('ngi_reports.{}.{}'.format(ngi_node, report_type), fromlist=['ngi_reports.{}'.format(ngi_node)])
    report = report_mod.Report(config, LOG, working_dir)
    
    # Print the output
    output_md = report.parse_template()
    output_fn = os.path.realpath(os.path.join(working_dir, report.report_fn + '.md'))
    try:
        with open(output_fn, 'w') as fh:
            print(output_md, file=fh)
    except IOError as e:
        raise IOError(e)
    
    # Convert markdown to HTML and PDF using pandoc
    try:
        templates_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), '../data/pandoc_templates/'))
        html_cmd = shlex.split('pandoc {0}.md -o {0}.html --template={1}/html_pandoc.html'.format(report.report_fn, templates_dir))
        pdf_cmd = shlex.split('pandoc {0}.md -o {0}.pdf --template={1}/latex_pandoc.tex --latex-engine=xelatex'.format(report.report_fn, templates_dir))
        subprocess.Popen(html_cmd, stdout=f)
        subprocess.Popen(pdf_cmd, stdout=f)
    except:
        LOG.error('Could not convert markdown to HTML or PDF')
        raise









if __name__ == "__main__":
    parser = argparse.ArgumentParser("Make an NGI Report")
    parser.add_argument("-d", "--dir", dest="working_dir", default=os.getcwd(),
        help="Working Directory. Default: cwd when script is executed.")
    parser.add_argument('report_type',  metavar='<report type>',
        help="Type of report to generate")

    kwargs = vars(parser.parse_args())
    
    make_report(**kwargs)