#!/usr/bin/env python

""" This is the entry point for ngi_reports.
"""

from __future__ import print_function

import argparse
import os
import sys
import shlex
import shutil
import subprocess

from ngi_reports.log import loggers
from ngi_reports.common import config as report_config

LOG = loggers.minimal_logger('NGI Reports')
config = report_config.load_config()

## create choices for report type based on available report template
allowed_report_types = [ fl.replace(".md","") for fl in os.listdir(os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'data', 'report_templates'))) ]

def make_report (report_type, working_dir=os.getcwd(), **kwargs):
    
    # Setup
    template_fn = '{}.md'.format(report_type)
    LOG.info('Report type: {}'.format(report_type))
    
    # Import the module for this report type
    ngi_node = config.get('ngi_reports', 'ngi_node')
    report_mod = __import__('ngi_reports.{}.{}'.format(ngi_node, report_type), fromlist=['ngi_reports.{}'.format(ngi_node)])
    report = report_mod.Report(config, LOG, working_dir, **kwargs)
    
    # Work out all of the directory and file names
    output_dir = os.path.realpath(os.path.join(working_dir, report.report_dir))
    output_bn = os.path.realpath(os.path.join(output_dir, report.report_fn))
    output_fn = output_bn + '.md'
    assets_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'data', 'assets'))
    pandoc_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'data', 'pandoc_templates'))
    
    # Create the directory if we don't already have it (from plots)
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Print the markdown output file
    output_md = report.parse_template()
    try:
        with open(output_fn, 'w') as fh:
            print(output_md, file=fh)
    except IOError as e:
        raise IOError(e)
    
    # Do we need the Swedac logo?
    swedac = ''
    try:
      if report.swedac:
          swedac = ' -V swedac '
    except AttributeError:
      pass
    
    # Convert markdown to HTML using pandoc
    try:
        LOG.info('Creating the HTML report')
        html_cmd = shlex.split('pandoc -s --section-divs {0}.md -o {0}.html --template={1}/html_pandoc.html {2}'.format(output_bn, pandoc_dir, swedac))
        subprocess.call(html_cmd)
    except:
        LOG.error('Could not convert markdown to HTML')
        raise
    
    # Convert markdown to PDF using pandoc
    try:    
        LOG.info('Creating the PDF report')
        pdf_cmd = shlex.split('pandoc -s {0}.md -o {0}.pdf --template={1}/latex_pandoc.tex --latex-engine=xelatex -V template_dir={1} {2}'.format(output_bn, pandoc_dir, swedac))
        subprocess.call(pdf_cmd)
    except:
        LOG.error('Could not convert markdown to PDF')
        raise

# calling main method to generate report
if __name__ == "__main__":
    parser = argparse.ArgumentParser("Make an NGI Report")
    parser.add_argument("-d", "--dir", dest="working_dir", default=os.getcwd(),
        help="Working Directory. Default: cwd when script is executed.")
    parser.add_argument('report_type', choices=allowed_report_types, metavar='<report type>', help="Type of report to generate")
    parser.add_argument('--project', default=None, action="store", help="Project name to generate 'project_summary' report")

    kwargs = vars(parser.parse_args())
           
    make_report(**kwargs)
