#!/usr/bin/env python

""" This is the entry point for ngi_reports.
"""

from __future__ import print_function

import argparse
import jinja2
import os
import shlex
import shutil
import subprocess

from ngi_reports.log import loggers
from ngi_reports.common import config as report_config

LOG = loggers.minimal_logger('NGI Reports')
config = report_config.load_config()

## CONSTANTS
# create choices for report type based on available report template
allowed_report_types = [ fl.replace(".md","") for fl in os.listdir(os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'data', 'report_templates'))) ]

def make_reports (report_type, working_dir=os.getcwd(), **kwargs):
    
    # Setup
    template_fn = '{}.md'.format(report_type)
    LOG.info('Report type: {}'.format(report_type))
    
    # Import the modules for this report type
    ngi_node = config.get('ngi_reports', 'ngi_node')
    report_mod = __import__('ngi_reports.{}.{}'.format(ngi_node, report_type), fromlist=['ngi_reports.{}'.format(ngi_node)])
    
    # Make the report object
    report = report_mod.Report(config, LOG, working_dir, **kwargs)
    
    # Work out all of the directory names
    output_dir = os.path.realpath(os.path.join(working_dir, report.report_dir))
    assets_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'data', 'assets'))
    pandoc_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'data', 'pandoc_templates'))
    reports_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), os.pardir, 'data', 'report_templates'))
    
    # Create the directory if we don't already have it
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Print the markdown output file
    # Load the Jinja2 template
    try:
        env = jinja2.Environment(loader=jinja2.FileSystemLoader(reports_dir))
        template = env.get_template('{}.md'.format(report_type))
    except:
        LOG.error('Could not load the Jinja report template')
        raise
    
    # Change to the reports directory - pandoc needs this for relative URLs
    old_cwd = os.getcwd()
    os.chdir(report.report_dir)
    
    # Get parsed markdown and print to file(s)
    output_mds = report.parse_template(template)
    for output_bn, output_md in output_mds.iteritems():
        try:
            with open('{}.md'.format(output_bn), 'w') as fh:
                print(output_md, file=fh)
        except IOError as e:
            raise IOError(e)
    
        # Convert markdown to HTML using pandoc
        try:
            html_cmd = shlex.split('pandoc --standalone --section-divs {0}.md -o {0}.html --template={1}/html_pandoc.html --default-image-extension=png --filter {1}/pandoc_filters.py'.format(output_bn, pandoc_dir))
            subprocess.call(html_cmd)
        except:
            LOG.error('Could not convert markdown to HTML')
            raise
    
        # Convert markdown to PDF using pandoc
        try:    
            pdf_cmd = shlex.split('pandoc --standalone {0}.md -o {0}.pdf --template={1}/latex_pandoc.tex --latex-engine=xelatex --default-image-extension=pdf --filter {1}/pandoc_filters.py -V template_dir={1}'.format(output_bn, pandoc_dir))
            subprocess.call(pdf_cmd)
        except:
            LOG.error('Could not convert markdown to PDF')
            raise
    
    # Change back to previous working dir
    os.chdir(old_cwd)

# calling main method to generate report
if __name__ == "__main__":
    parser = argparse.ArgumentParser("Make an NGI Report")
    parser.add_argument("-d", "--dir", dest="working_dir", default=os.getcwd(),
        help="Working Directory. Default: cwd when script is executed.")
    parser.add_argument('report_type', choices=allowed_report_types, metavar='<report type>', help="Type of report to generate. Choose from: {}".format(', '.join(allowed_report_types)))
    parser.add_argument('--project', default=None, action="store", help="Project name to generate 'project_summary' report")

    kwargs = vars(parser.parse_args())
           
    make_reports(**kwargs)
